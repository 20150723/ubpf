// vi: ft=c
/*
 * Copyright 2015 Big Switch Networks, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define _GNU_SOURCE
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <unistd.h>
#include <inttypes.h>
#include <sys/mman.h>
#include <errno.h>
#include "ubpf_int.h"

#define DASM_CHECKS
#include <dasm_proto.h>
#include <dasm_x86.h>

|.arch x64

/* The hardcoded dasm_State variable name is confusing given our use of 'dst' */
#define dasm Dst

/*
 * Register mapping:
 *
 * x86 -> eBPF
 * rax -> r0
 * rdi -> r1
 * rsi -> r2
 * rdx -> r3
 * r8  -> r4
 * r9  -> r5
 * r10 -> r6
 * r11 -> r7
 * r12 -> r8
 * r13 -> r9
 * rsp -> r10
 *
 * r12, r13, and rsp are callee save.
 * The first argument for an x86 function comes in rdi and the second in rsi.
 * The return value for an x86 function is in rax.
 * rcx (cl) is a required operand for shifts by a register. We reserve it.
 */
#define RCX 1
static int
map_register(int r)
{
    switch (r) {
    case 0: return 0;
    case 1: return 7;
    case 2: return 6;
    case 3: return 2;
    case 4: return 8;
    case 5: return 9;
    case 6: return 10;
    case 7: return 11;
    case 8: return 12;
    case 9: return 13;
    case 10: return 4;
    default: abort();
    }
}

|.actionlist actions

ubpf_jit_fn
ubpf_compile(struct ubpf_vm *vm, char **errmsg)
{
    dasm_State *d;
    void *jitted = NULL;
    size_t jitted_size;
    int ret;

    *errmsg = NULL;

    if (vm->jitted) {
        return vm->jitted;
    }

    |.section code
    dasm_init(&d, DASM_MAXSECTION);
    dasm_setup(&d, actions);

    |.globals lbl_
    void *labels[lbl__MAX];
    dasm_setupglobal(&d, labels, lbl__MAX);

    dasm_growpc(&d, vm->num_insts);

    dasm_State **dasm = &d;

    /* Prologue */
    |.code
    |->entry:
    /* r12 and r13 are callee save */
    | push r12
    | push r13

    int i;
    for (i = 0; i < vm->num_insts; i++) {
        struct ebpf_inst inst = vm->insts[i];
        |=>i:

        int src = map_register(inst.src);
        int dst = map_register(inst.dst);
        int jmp_target = i + inst.offset + 1;

        switch (inst.opcode) {
        case EBPF_OP_ADD_IMM:
            | add Rd(dst), inst.imm
            break;
        case EBPF_OP_ADD_REG:
            | add Rd(dst), Rd(src)
            break;
        case EBPF_OP_SUB_IMM:
            | sub Rd(dst), inst.imm
            break;
        case EBPF_OP_SUB_REG:
            | sub Rd(dst), Rd(src)
            break;
#if 0
        case EBPF_OP_MUL_IMM:
            break;
        case EBPF_OP_MUL_REG:
            break;
        case EBPF_OP_DIV_IMM:
            break;
        case EBPF_OP_DIV_REG:
            break;
#endif
        case EBPF_OP_OR_IMM:
            | or Rd(dst), inst.imm
            break;
        case EBPF_OP_OR_REG:
            | or Rd(dst), Rd(src)
            break;
        case EBPF_OP_AND_IMM:
            | and Rd(dst), inst.imm
            break;
        case EBPF_OP_AND_REG:
            | and Rd(dst), Rd(src)
            break;
        case EBPF_OP_LSH_IMM:
            | shl Rd(dst), inst.imm
            break;
        case EBPF_OP_LSH_REG:
            | mov Rq(RCX), Rq(src)
            | shl Rd(dst), cl
            break;
        case EBPF_OP_RSH_IMM:
            | shr Rd(dst), inst.imm
            break;
        case EBPF_OP_RSH_REG:
            | mov Rq(RCX), Rq(src)
            | shr Rd(dst), cl
            break;
        case EBPF_OP_NEG:
            | neg Rd(dst)
            break;
#if 0
        case EBPF_OP_MOD_IMM:
            break;
        case EBPF_OP_MOD_REG:
            break;
#endif
        case EBPF_OP_XOR_IMM:
            | xor Rd(dst), inst.imm
            break;
        case EBPF_OP_XOR_REG:
            | xor Rd(dst), Rd(src)
            break;
        case EBPF_OP_MOV_IMM:
            | mov Rd(dst), inst.imm
            break;
        case EBPF_OP_MOV_REG:
            | mov Rd(dst), Rd(src)
            break;
        case EBPF_OP_ARSH_IMM:
            | sar Rd(dst), inst.imm
            break;
        case EBPF_OP_ARSH_REG:
            | mov Rq(RCX), Rq(src)
            | sar Rd(dst), cl
            break;

        case EBPF_OP_LE:
            /* No-op */
            break;
        case EBPF_OP_BE:
            if (inst.imm == 16) {
                | rol Rw(dst), 8
            } else if (inst.imm == 32) {
                | bswap Rd(dst)
            } else if (inst.imm == 64) {
                | bswap Rq(dst)
            }
            break;

        case EBPF_OP_ADD64_IMM:
            | add Rq(dst), inst.imm
            break;
        case EBPF_OP_ADD64_REG:
            | add Rq(dst), Rq(src)
            break;
        case EBPF_OP_SUB64_IMM:
            | sub Rq(dst), inst.imm
            break;
        case EBPF_OP_SUB64_REG:
            | sub Rq(dst), Rq(src)
            break;
#if 0
        case EBPF_OP_MUL64_IMM:
            break;
        case EBPF_OP_MUL64_REG:
            break;
        case EBPF_OP_DIV64_IMM:
            break;
        case EBPF_OP_DIV64_REG:
            break;
#endif
        case EBPF_OP_OR64_IMM:
            | or Rq(dst), inst.imm
            break;
        case EBPF_OP_OR64_REG:
            | or Rq(dst), Rq(src)
            break;
        case EBPF_OP_AND64_IMM:
            | and Rq(dst), inst.imm
            break;
        case EBPF_OP_AND64_REG:
            | and Rq(dst), Rq(src)
            break;
        case EBPF_OP_LSH64_IMM:
            | shl Rq(dst), inst.imm
            break;
        case EBPF_OP_LSH64_REG:
            | mov Rq(RCX), Rq(src)
            | shl Rq(dst), cl
            break;
        case EBPF_OP_RSH64_IMM:
            | shr Rq(dst), inst.imm
            break;
        case EBPF_OP_RSH64_REG:
            | mov Rq(RCX), Rq(src)
            | shr Rq(dst), cl
            break;
        case EBPF_OP_NEG64:
            | neg Rq(dst)
            break;
#if 0
        case EBPF_OP_MOD64_IMM:
            break;
        case EBPF_OP_MOD64_REG:
            break;
#endif
        case EBPF_OP_XOR64_IMM:
            | xor Rq(dst), inst.imm
            break;
        case EBPF_OP_XOR64_REG:
            | xor Rq(dst), Rq(src)
            break;
        case EBPF_OP_MOV64_IMM:
            /* TODO use shorter mov for smaller immediates */
            | mov Rq(dst), inst.imm
            break;
        case EBPF_OP_MOV64_REG:
            | mov Rq(dst), Rq(src)
            break;
        case EBPF_OP_ARSH64_IMM:
            | sar Rq(dst), inst.imm
            break;
        case EBPF_OP_ARSH64_REG:
            | mov Rq(RCX), Rq(src)
            | sar Rq(dst), cl
            break;

        case EBPF_OP_JA:
            | jmp =>jmp_target
            break;
        case EBPF_OP_JEQ_IMM:
            | cmp Rq(dst), inst.imm
            | je =>jmp_target
            break;
        case EBPF_OP_JEQ_REG:
            | cmp Rq(dst), Rq(src)
            | je =>jmp_target
            break;
        case EBPF_OP_JGT_IMM:
            | cmp Rq(dst), inst.imm
            | ja =>jmp_target
            break;
        case EBPF_OP_JGT_REG:
            | cmp Rq(dst), Rq(src)
            | ja =>jmp_target
            break;
        case EBPF_OP_JGE_IMM:
            | cmp Rq(dst), inst.imm
            | jae =>jmp_target
            break;
        case EBPF_OP_JGE_REG:
            | cmp Rq(dst), Rq(src)
            | jae =>jmp_target
            break;
        case EBPF_OP_JSET_IMM:
            | test Rq(dst), inst.imm
            | jnz =>jmp_target
            break;
        case EBPF_OP_JSET_REG:
            | test Rq(dst), Rq(src)
            | jnz =>jmp_target
            break;
        case EBPF_OP_JNE_IMM:
            | cmp Rq(dst), inst.imm
            | jne =>jmp_target
            break;
        case EBPF_OP_JNE_REG:
            | cmp Rq(dst), Rq(src)
            | jne =>jmp_target
            break;
        case EBPF_OP_JSGT_IMM:
            | cmp Rq(dst), inst.imm
            | jg =>jmp_target
            break;
        case EBPF_OP_JSGT_REG:
            | cmp Rq(dst), Rq(src)
            | jg =>jmp_target
            break;
        case EBPF_OP_JSGE_IMM:
            | cmp Rq(dst), inst.imm
            | jge =>jmp_target
            break;
        case EBPF_OP_JSGE_REG:
            | cmp Rq(dst), Rq(src)
            | jge =>jmp_target
            break;
        case EBPF_OP_EXIT:
            /* TODO omit if last instruction */
            | jmp ->exit
            break;

        case EBPF_OP_LDXW:
            | mov Rd(dst), dword [Rq(src)+inst.offset]
            break;
        case EBPF_OP_LDXH:
            | movzx Rq(dst), word [Rq(src)+inst.offset]
            break;
        case EBPF_OP_LDXB:
            /* movzx is not assembled correctly */
            | xor ecx, ecx
            | mov cl, byte [Rq(src)+inst.offset]
            | mov Rq(dst), Rq(RCX)
            break;
        case EBPF_OP_LDXDW:
            | mov Rq(dst), qword [Rq(src)+inst.offset]
            break;

        case EBPF_OP_STW:
            | mov dword [Rq(dst)+inst.offset], inst.imm
            break;
        case EBPF_OP_STH:
            | mov word [Rq(dst)+inst.offset], inst.imm
            break;
        case EBPF_OP_STB:
            | mov byte [Rq(dst)+inst.offset], inst.imm
            break;
        case EBPF_OP_STDW:
            | mov qword [Rq(dst)+inst.offset], inst.imm
            break;

        case EBPF_OP_STXW:
            | mov dword [Rq(dst)+inst.offset], Rd(src)
            break;
        case EBPF_OP_STXH:
            | mov word [Rq(dst)+inst.offset], Rw(src)
            break;
        case EBPF_OP_STXB:
            /* Rb(src) generates the wrong byte registers */
            /* mov rcx, Rq(src) also did not work */
            | mov Rq(RCX), Rq(src)
            | mov byte [Rq(dst)+inst.offset], cl
            break;
        case EBPF_OP_STXDW:
            | mov qword [Rq(dst)+inst.offset], Rq(src)
            break;

        default:
            *errmsg = ubpf_error("unknown opcode 0x%02x at PC %d", inst.opcode, i);
            goto error;
        }
    }

    /* Epilogue */
    | ->exit:
    | pop r13
    | pop r12
    | ret

    if ((ret = dasm_link(dasm, &jitted_size)) != DASM_S_OK) {
        *errmsg = ubpf_error("internal uBPF error: dasm_link failed: %d", ret);
        goto error;
    }

    jitted = mmap(0, jitted_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    if (jitted == MAP_FAILED) {
        *errmsg = ubpf_error("internal uBPF error: mmap failed: %s\n", strerror(errno));
        goto error;
    }

    if ((ret = dasm_encode(dasm, jitted)) != DASM_S_OK) {
        *errmsg = ubpf_error("internal uBPF error: dasm_encode failed: %d\n", ret);
        goto error;
    }

    if (mprotect(jitted, jitted_size, PROT_READ | PROT_EXEC) < 0) {
        *errmsg = ubpf_error("internal uBPF error: mprotect failed: %s\n", strerror(errno));
        goto error;
    }

    dasm_free(dasm);
    vm->jitted = labels[lbl_entry];
    vm->jitted_size = jitted_size;
    return vm->jitted;

error:
    dasm_free(dasm);
    if (jitted) {
        munmap(jitted, jitted_size);
    }
    return NULL;
}
